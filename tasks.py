from config import celery_app, db, BOT_TOKEN
from aiogram import Bot
from datetime import datetime, timedelta
from bson import ObjectId
import humanize
import logging
import pytz

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –ª–æ–≥–≥–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
logger = logging.getLogger(__name__)
timezone_moscow = pytz.timezone("Europe/Moscow")

def convert_to_local_time(utc_time):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç UTC –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ (UTC+3)"""
    if utc_time.tzinfo is None:
        utc_time = pytz.utc.localize(utc_time)
    return utc_time.astimezone(timezone_moscow)

@celery_app.task
def send_reminder(task_id: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏"""
    try:
        task = db.tasks.find_one({"_id": ObjectId(task_id)})
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏
        if not task or task["status"] != "active":
            return

        now = datetime.now(pytz.utc)
        task_deadline = task["deadline"]
        
        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∫ UTC, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if task_deadline.tzinfo is None:
            task_deadline = pytz.utc.localize(task_deadline)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–∫–∏
        if now > task_deadline:
            logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞")
            return

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        time_left = task_deadline - now
        local_deadline = convert_to_local_time(task_deadline)
        
        message = (
            f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n"
            f"–ó–∞–¥–∞—á–∞: {task['description']}\n"
            f"–î–µ–¥–ª–∞–π–Ω: {local_deadline.strftime('%d.%m.%Y %H:%M')}\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å: {humanize.naturaldelta(time_left)}"
        )
        
        bot.send_message(task["user_id"], message)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {str(e)}")

@celery_app.task
def check_deadlines():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–æ–º–µ—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
    now = datetime.now(pytz.utc)
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á...")
    
    try:
        # –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á —Å –∏—Å—Ç–µ–∫—à–∏–º –¥–µ–¥–ª–∞–π–Ω–æ–º
        expired_tasks = list(db.tasks.find({
            "deadline": {"$lt": now},
            "status": "active"
        }))
        
        for task in expired_tasks:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            db.tasks.update_one(
                {"_id": task["_id"]},
                {"$set": {"status": "overdue"}}
            )
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            task_deadline = task["deadline"]
            if task_deadline.tzinfo is None:
                task_deadline = pytz.utc.localize(task_deadline)
            
            local_deadline = convert_to_local_time(task_deadline)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            bot.send_message(
                task["user_id"],
                f"‚ùå –ó–∞–¥–∞—á–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞!\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {task['description']}\n"
                f"–î–µ–¥–ª–∞–π–Ω –±—ã–ª: {local_deadline.strftime('%d.%m.%Y %H:%M')}"
            )
            
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(expired_tasks)} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤: {str(e)}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
celery_app.conf.beat_schedule = {
    'check-deadlines-every-minute': {
        'task': 'tasks.check_deadlines',
        'schedule': 60.0,  # –ö–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
    },
}