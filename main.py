import logging
import pytz
import humanize
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from datetime import datetime, timedelta
from mongodb import User, Task
from config import db, celery_app, BOT_TOKEN
from bson import ObjectId
from bson.errors import InvalidId

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)
timezone_moscow = pytz.timezone("Europe/Moscow")

class TaskStates(StatesGroup):
    description = State()
    deadline = State()
    tags = State()
    reminder = State()
    edit_description = State()
    edit_deadline = State()
    edit_tags = State()
    edit_reminder = State()
    tag_creation = State()

def convert_to_local_time(utc_time):
    if utc_time.tzinfo is None:
        utc_time = pytz.utc.localize(utc_time)
    return utc_time.astimezone(timezone_moscow)

def main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text="‚ûï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞"),
        types.KeyboardButton(text="üìù –ú–æ–∏ –∑–∞–¥–∞—á–∏")
    )
    builder.row(
        types.KeyboardButton(text="üè∑Ô∏è –ú–æ–∏ —Ç–µ–≥–∏"),
        types.KeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á–∏")
    )
    return builder.as_markup(resize_keyboard=True)

@dp.message(Command("start"))
async def start(message: types.Message):
    User.get_or_create(message.from_user.id)
    await message.answer(
        "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Task Manager!",
        reply_markup=main_keyboard()
    )

@dp.message(lambda m: m.text == "‚ûï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞")
async def add_task_start(message: types.Message, state: FSMContext):
    await state.set_state(TaskStates.description)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:", reply_markup=types.ReplyKeyboardRemove())

@dp.message(TaskStates.description)
async def process_description(message: types.Message, state: FSMContext):
    if len(message.text) > 200:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 200 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
        
    await state.update_data(description=message.text)
    await state.set_state(TaskStates.deadline)
    await message.answer("‚è≥ –í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω (–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú):")

@dp.message(TaskStates.deadline)
async def process_deadline(message: types.Message, state: FSMContext):
    try:
        naive_deadline = datetime.strptime(message.text, "%Y-%m-%d %H:%M")
        local_deadline = timezone_moscow.localize(naive_deadline)
        utc_deadline = local_deadline.astimezone(pytz.utc)
        
        await state.update_data(deadline=utc_deadline)
        
        user = User.get_or_create(message.from_user.id)
        user_tags = user.get("tags", [])
        if user_tags:
            builder = InlineKeyboardBuilder()
            for tag in user_tags:
                builder.add(types.InlineKeyboardButton(
                    text=tag,
                    callback_data=f"tag_{tag}"
                ))
            builder.row(types.InlineKeyboardButton(
                text="üèÅ –ì–æ—Ç–æ–≤–æ",
                callback_data="done_tags"
            ))
            await message.answer("üè∑Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏:", reply_markup=builder.as_markup())
            await state.set_state(TaskStates.tags)
        else:
            await state.update_data(tags=[])
            await state.set_state(TaskStates.reminder)
            await message.answer("‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú):")

@dp.callback_query(TaskStates.tags, lambda c: c.data.startswith("tag_"))
async def process_tags(callback: types.CallbackQuery, state: FSMContext):
    tag = callback.data.split("_")[1]
    data = await state.get_data()
    tags = data.get("tags", [])
    if tag in tags:
        tags.remove(tag)
    else:
        tags.append(tag)
    await state.update_data(tags=tags)
    await callback.answer(f"–¢–µ–≥ '{tag}' {'–¥–æ–±–∞–≤–ª–µ–Ω' if tag in tags else '—É–¥–∞–ª—ë–Ω'}!")

@dp.callback_query(TaskStates.tags, lambda c: c.data == "done_tags")
async def finish_tags(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(TaskStates.reminder)
    await callback.message.answer("‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")

@dp.message(TaskStates.reminder)
async def custom_reminder(message: types.Message, state: FSMContext):
    try:
        minutes = int(message.text)
        if minutes <= 0:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç!")
            return
            
        data = await state.get_data()
        deadline = data["deadline"]
        reminder_time = deadline - timedelta(minutes=minutes)
        
        await state.update_data(reminder_time=reminder_time)
        await process_task_creation(message, state)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç!")
        return

async def process_task_creation(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        user = User.get_or_create(message.from_user.id)
        
        task = {
            "user_id": message.from_user.id,
            "description": data["description"],
            "deadline": data["deadline"],
            "reminder_time": data["reminder_time"],
            "tags": data.get("tags", []),
            "status": "active",
            "created_at": datetime.now(pytz.utc)
        }
        
        result = Task.create(task)
        if not result.inserted_id:
            raise ValueError("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏")
            
        task_id = str(result.inserted_id)

        celery_app.send_task(
            "tasks.send_reminder",
            args=(task_id,),
            eta=task["reminder_time"].astimezone(pytz.utc)
        )

        local_reminder = convert_to_local_time(task["reminder_time"])
        await message.answer(
            f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!\n"
            f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {local_reminder.strftime('%d.%m.%Y %H:%M')}",
            reply_markup=main_keyboard()
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {str(e)}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")
        
    finally:
        await state.clear()

@dp.message(lambda m: m.text == "üìù –ú–æ–∏ –∑–∞–¥–∞—á–∏")
async def list_tasks(message: types.Message):
    try:
        tasks = list(db.tasks.find({
            "user_id": message.from_user.id,
            "status": {"$in": ["active", "overdue"]}
        }))

        now = datetime.now(pytz.utc)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á
        for task in tasks:
            try:
                task_deadline = task.get("deadline")
                if not task_deadline:
                    continue
                    
                if task_deadline.tzinfo is None:
                    task_deadline = pytz.utc.localize(task_deadline)
                
                if task["status"] == "active" and now > task_deadline:
                    db.tasks.update_one(
                        {"_id": task["_id"]},
                        {"$set": {"status": "overdue"}}
                    )
                    task["status"] = "overdue"
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ {task.get('_id')}: {str(e)}")
                continue

        if not tasks:
            return await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á!")

        status_map = {
            "active": "‚è≥ –ê–∫—Ç–∏–≤–Ω–∞",
            "completed": "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞",
            "overdue": "‚ùå –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞"
        }

        for task in tasks:
            try:
                task_deadline = task.get("deadline")
                task_reminder = task.get("reminder_time")
                
                if not task_deadline or not task_reminder:
                    continue

                local_deadline = convert_to_local_time(task_deadline)
                local_reminder = convert_to_local_time(task_reminder)
                
                # –†–∞—Å—á–µ—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
                task_deadline_utc = task_deadline if task_deadline.tzinfo else pytz.utc.localize(task_deadline)
                time_left = task_deadline_utc - now
                
                if time_left.total_seconds() > 0:
                    time_left_str = f"‚è± –û—Å—Ç–∞–ª–æ—Å—å: {humanize.naturaldelta(time_left)}"
                else:
                    time_left_str = "‚åõÔ∏è –í—Ä–µ–º—è –≤—ã—à–ª–æ!"
                
                status = status_map.get(task["status"], "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
                text = (
                    f"üìå {task.get('description', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
                    f"{status}\n"
                    f"‚è≥ –î–µ–¥–ª–∞–π–Ω: {local_deadline.strftime('%d.%m.%Y %H:%M')}\n"
                    f"{time_left_str}\n"
                    f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {local_reminder.strftime('%d.%m.%Y %H:%M')}\n"
                    f"üè∑Ô∏è –¢–µ–≥–∏: {', '.join(task.get('tags', [])) if task.get('tags') else '–Ω–µ—Ç'}"
                )
                
                builder = InlineKeyboardBuilder()
                builder.row(
                    types.InlineKeyboardButton(
                        text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å",
                        callback_data=f"complete_{task['_id']}"
                    ),
                    types.InlineKeyboardButton(
                        text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                        callback_data=f"edit_task_{task['_id']}"
                    ),
                    types.InlineKeyboardButton(
                        text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
                        callback_data=f"delete_{task['_id']}"
                    )
                )
                await message.answer(text, reply_markup=builder.as_markup())
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ {task.get('_id')}: {str(e)}")
                continue

    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á: {str(e)}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á")

@dp.callback_query(lambda c: c.data.startswith("complete_"))
async def complete_task(callback: types.CallbackQuery):
    task_id = callback.data.split("_")[1]
    try:
        Task.update(task_id, {"status": "completed"})
        await callback.message.edit_text("‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    except InvalidId:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–¥–∞—á–∏")
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("delete_"))
async def delete_task(callback: types.CallbackQuery):
    task_id = callback.data.split("_")[1]
    try:
        Task.delete(task_id)
        await callback.message.edit_text("üóëÔ∏è –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!")
    except InvalidId:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–¥–∞—á–∏")
    await callback.answer()

@dp.message(lambda m: m.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á–∏")
async def delete_tasks_menu(message: types.Message):
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text="‚ùå –£–¥–∞–ª–∏—Ç—å –í–°–ï –∑–∞–¥–∞—á–∏",
            callback_data="delete_all"
        )
    )
    await message.answer(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏?",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(lambda c: c.data == "delete_all")
async def delete_all_tasks(callback: types.CallbackQuery):
    try:
        Task.delete_all(callback.from_user.id)
        await callback.message.edit_text("‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á: {str(e)}")
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á–∏")
    await callback.answer()

@dp.message(lambda m: m.text == "üè∑Ô∏è –ú–æ–∏ —Ç–µ–≥–∏")
async def manage_tags(message: types.Message):
    user = User.get_or_create(message.from_user.id)
    tags = user.get("tags", [])
    
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ç–µ–≥", callback_data="create_tag")
    )
    if tags:
        builder.row(
            types.InlineKeyboardButton(text="üîç –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–≥–∞–º", callback_data="filter_tags")
        )
    await message.answer(
        f"üè∑Ô∏è –í–∞—à–∏ —Ç–µ–≥–∏: {', '.join(tags) if tags else '–ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ–≥–æ–≤!'}",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(lambda c: c.data == "create_tag")
async def create_tag_start(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(TaskStates.tag_creation)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ–≥–∞:")

@dp.message(TaskStates.tag_creation)
async def process_tag_creation(message: types.Message, state: FSMContext):
    User.add_tag(message.from_user.id, message.text)
    await message.answer(f"üè∑Ô∏è –¢–µ–≥ '{message.text}' —Å–æ–∑–¥–∞–Ω!", reply_markup=main_keyboard())
    await state.clear()

@dp.callback_query(lambda c: c.data == "filter_tags")
async def filter_tags_menu(callback: types.CallbackQuery):
    user = User.get_or_create(callback.from_user.id)
    tags = user.get("tags", [])
    
    if not tags:
        await callback.answer("‚ùå –ù–µ—Ç —Ç–µ–≥–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏!")
        return
    
    builder = InlineKeyboardBuilder()
    for tag in tags:
        builder.add(types.InlineKeyboardButton(
            text=tag,
            callback_data=f"filter_tag_{tag}"
        ))
    builder.adjust(2)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:", reply_markup=builder.as_markup())

@dp.callback_query(lambda c: c.data.startswith("filter_tag_"))
async def filter_tasks_by_tag(callback: types.CallbackQuery):
    tag = callback.data.split("_")[2]
    tasks = Task.get_tasks_by_tag(callback.from_user.id, tag)
    
    if not tasks:
        await callback.message.answer(f"üì≠ –ù–µ—Ç –∑–∞–¥–∞—á —Å —Ç–µ–≥–æ–º '{tag}'!")
        return
    
    for task in tasks:
        task_deadline = task["deadline"]
        task_reminder = task["reminder_time"]
        
        local_deadline = convert_to_local_time(task_deadline)
        local_reminder = convert_to_local_time(task_reminder)
        
        text = (
            f"üìå {task['description']}\n"
            f"‚è≥ –î–µ–¥–ª–∞–π–Ω: {local_deadline.strftime('%d.%m.%Y %H:%M')}\n"
            f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {local_reminder.strftime('%d.%m.%Y %H:%M')}\n"
            f"üè∑Ô∏è –¢–µ–≥–∏: {', '.join(task['tags'])}"
        )
        await callback.message.answer(text)
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("edit_task_"))
async def edit_task_start(callback: types.CallbackQuery, state: FSMContext):
    try:
        task_id = callback.data.split("_")[2]
        task = Task.get_task(task_id)
        await state.update_data(edit_task_id=task_id)
        await state.set_state(TaskStates.edit_description)
        await callback.message.answer(
            f"‚úèÔ∏è –¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {task['description']}\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:"
        )
    except InvalidId:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–¥–∞—á–∏")

@dp.message(TaskStates.edit_description)
async def edit_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(TaskStates.edit_deadline)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω (–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú):")

@dp.message(TaskStates.edit_deadline)
async def edit_deadline(message: types.Message, state: FSMContext):
    try:
        naive_deadline = datetime.strptime(message.text, "%Y-%m-%d %H:%M")
        local_deadline = timezone_moscow.localize(naive_deadline)
        utc_deadline = local_deadline.astimezone(pytz.utc)
        
        await state.update_data(deadline=utc_deadline)
        
        user = User.get_or_create(message.from_user.id)
        user_tags = user.get("tags", [])
        data = await state.get_data()
        current_tags = data.get("tags", [])
        
        builder = InlineKeyboardBuilder()
        for tag in user_tags:
            builder.add(types.InlineKeyboardButton(
                text=f"‚úÖ {tag}" if tag in current_tags else tag,
                callback_data=f"edit_tag_{tag}"
            ))
        builder.row(types.InlineKeyboardButton(
            text="üèÅ –ì–æ—Ç–æ–≤–æ",
            callback_data="edit_done_tags"
        ))
        await message.answer("üè∑Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏:", reply_markup=builder.as_markup())
        await state.set_state(TaskStates.edit_tags)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú):")

@dp.callback_query(TaskStates.edit_tags, lambda c: c.data.startswith("edit_tag_"))
async def edit_process_tags(callback: types.CallbackQuery, state: FSMContext):
    tag = callback.data.split("_")[2]
    data = await state.get_data()
    tags = data.get("tags", [])
    
    if tag in tags:
        tags.remove(tag)
    else:
        tags.append(tag)
    
    await state.update_data(tags=tags)
    await callback.answer(f"–¢–µ–≥ '{tag}' {'–¥–æ–±–∞–≤–ª–µ–Ω' if tag in tags else '—É–¥–∞–ª—ë–Ω'}!")

@dp.callback_query(TaskStates.edit_tags, lambda c: c.data == "edit_done_tags")
async def edit_finish_tags(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(TaskStates.edit_reminder)
    await callback.message.answer("‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")

@dp.message(TaskStates.edit_reminder)
async def edit_custom_reminder_handler(message: types.Message, state: FSMContext):
    try:
        minutes = int(message.text)
        if minutes <= 0:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç!")
            return

        data = await state.get_data()
        deadline = data["deadline"]
        reminder_time = deadline - timedelta(minutes=minutes)
        
        await state.update_data(reminder_time=reminder_time)
        await finalize_task_edit(message, state)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç!")

async def finalize_task_edit(message: types.Message, state: FSMContext):
    data = await state.get_data()
    task_id = data["edit_task_id"]
    
    update_data = {
        "description": data["description"],
        "deadline": data["deadline"],
        "tags": data.get("tags", []),
        "reminder_time": data["reminder_time"]
    }
    
    try:
        Task.update(task_id, update_data)
        celery_app.send_task(
            "tasks.send_reminder",
            args=(task_id,),
            eta=data["reminder_time"].astimezone(pytz.utc)
        )
        await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=main_keyboard())
    except InvalidId:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏!")
    await state.clear()

@dp.callback_query(lambda c: c.data.startswith("keep_overdue_"))
async def handle_keep_overdue(callback: types.CallbackQuery):
    try:
        task_id = callback.data.split("_")[2]
        await callback.message.edit_reply_markup()
        await callback.answer("‚úÖ –ó–∞–¥–∞—á–∞ –æ—Å—Ç–∞–ª–∞—Å—å –≤ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

@dp.callback_query(lambda c: c.data.startswith("reschedule_"))
async def handle_reschedule(callback: types.CallbackQuery):
    try:
        task_id = callback.data.split("_")[1]
        task = Task.get_task(task_id)
        
        new_deadline = task["deadline"] + timedelta(days=1)
        new_reminder = task["reminder_time"] + timedelta(days=1)
        
        Task.update(task_id, {
            "deadline": new_deadline,
            "reminder_time": new_reminder,
            "status": "active"
        })
        
        celery_app.send_task(
            "tasks.send_reminder",
            args=(task_id,),
            eta=new_reminder.astimezone(pytz.utc)
        )

        local_time = convert_to_local_time(new_deadline).strftime('%d.%m.%Y %H:%M')
        await callback.message.edit_text(
            f"‚úÖ –ó–∞–¥–∞—á–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞ {local_time}",
            reply_markup=None
        )
        await callback.answer()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–¥–∞—á–∏: {str(e)}")
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–¥–∞—á—É")

if __name__ == "__main__":
    from mongodb import init_db
    init_db()
    dp.run_polling(bot)